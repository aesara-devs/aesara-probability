
\documentclass[12pt]{article}
\usepackage[slantedGreek]{mathpazo}
\usepackage{amsfonts}
\usepackage{setspace}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage{subcaption}
\usepackage{suffix}
\usepackage{color}

\usepackage{todonotes}
\usepackage{draftwatermark}
\SetWatermarkScale{1}
\SetWatermarkLightness{0.90}

% used by Pweave
\usepackage{graphicx}
\usepackage{minted}

% this order is important
\usepackage{hyperref}
\usepackage[author-year]{amsrefs}

\allowdisplaybreaks

\include{math-commands}
\graphicspath{{../../figures/}{../figures/}{./figures/}{./}}

\title{A Title}

\author{Some Authors}

\date
\singlespacing

\begin{document}

\maketitle
\begin{abstract}
An abstract.
\end{abstract}

\section{Introduction}

SymPy \cite{sympy2014} is great with \texttt{noweb} files:
<< sympy_setup, echo=True>>=
from sympy.functions import meijerg
from sympy.functions.special.hyper import meijerg as meijergn
from sympy.simplify import hyperexpand, powdenest
from sympy.integrals import meijerint
from sympy.abc import x
from mpmath import *
from sympy.core.containers import Tuple
from sympy import latex
from sympy import *

import matplotlib.pyplot as plt
import numpy as np

init_printing(use_latex='matplotlib', order='grlex',\
  wrap_line=False, latex_mode='equation')

lam = Symbol('lambda', positive=True, real=True)
tau = Symbol('tau', positive=True, real=True)
theta = Symbol('theta', real=True)
x = Symbol('x', real=True)
y = Symbol('y', real=True)
z = Symbol('z', positive=True, real=True)
u = Symbol('u', positive=True, real=True)
@

Figure~\ref{fig:example_fig} shows how to plot in \texttt{Pweave}.
<< example_fig, fig=True, caption='A caption', f_pos='h!' >>=

def hsp_int_num(theta) : return(quadgl(lambda tau: (exp(-tau/2 * theta**2) * log(tau)/(tau-1)), [0, 1, inf]))

theta_range = np.linspace(0.001, 5, 100)
num_hsp_prior_vals = [float(yval.real) for yval in map(hsp_int_num, theta_range)]

plt.figure()
plt.plot(theta_range, num_hsp_prior_vals, linestyle='--', label="HS+ numeric")
plt.legend()
plt.axes().set_yscale('log')
plt.show()
@

We can output text from \texttt{SymPy}:
<< example_tex_output, results='tex', wrap='code', evaluate=False >>=
k, N = symbols("k N", integer=True, positive = True)
marg_post_mg = meijerg(((sympify(1)/2,0,0),()),((0,0,k),(k+sympify(1)/2,)),(y/tau)**2 / 2)
marg_post_k = sign(y)/(2*tau) * (-2/y**2)**k / factorial(k) * marg_post_mg 
marg_post_sum = Sum(marg_post_k, (k,0,oo)).simplify()
print(latex(marg_post_sum, mode='equation', itex=True))
@

The same can be done inline:
<%= latex(marg_post_sum, mode='equation', itex=True) %>

\end{document}

