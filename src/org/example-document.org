#+TITLE: An Org-mode Document
#+AUTHOR: Brandon T. Willard
#+DATE: 2018-05-03
#+EMAIL: brandonwillard@gmail.com

#+STARTUP: hideblocks indent hidestars
#+OPTIONS: ^:nil toc:nil tex:t d:results
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+PROPERTY: header-args :eval never-export :exports both :results output drawer replace
#+PROPERTY: header-args+ :session
#+PROPERTY: header-args:latex :results raw replace :exports results :eval yes

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../extra/custom.css" />

#+INCLUDE: latex-setup.org
#+BEGIN_SRC elisp :eval t :exports none :results none
;; If you want to load content from another org file...
(org-babel-lob-ingest "org-babel-extensions.org")
#+END_SRC

#+BEGIN_abstract
Here's the abstract.
#+END_abstract

* Introduction
:PROPERTIES:
:CUSTOM_ID: sec:introduction
:END:

This is an example with a reference to [[citet:somepaper2018]].

#+NAME: python_setup
#+BEGIN_SRC python :exports code :results none
import matplotlib.pyplot as plt

import numpy as np
import pandas as pd

from tabulate import tabulate
#+END_SRC

[[Cref:table_example]] demonstrates a listings setup that can span multiple pages.
It's not perfect, though (e.g. the caption is included in the colored background).

#+ATTR_LATEX: :float t :placement p
#+CAPTION: Example of a src_python[:eval never]{DataFrame}.
#+NAME: table_example
#+BEGIN_SRC python :exports both :results raw table
test_table = pd.DataFrame([[i + 1 for i in range(40)] for i in range(2)] ,
                          index=['a', 'b'],
                          columns=['col{}'.format(i) for i in range(40)])

# A really long comment
#
#
#
#
# ok
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# This should span two pages, but the listing output doesn't get cut off.

print(tabulate(test_table, tablefmt='orgtbl', headers='keys', showindex=None))
#+END_SRC

#+CAPTION: A table generated from the src_python[:eval never]{DataFrame} in [[Cref:table_example]].
#+NAME: tab:table_example
#+ATTR_LATEX: :mode table :float t :center t :environment adjusttabular
#+RESULTS: table_example
| col0 | col1 | col2 | col3 | col4 | col5 | col6 | col7 | col8 | col9 | col10 | col11 | col12 | col13 | col14 | col15 | col16 | col17 | col18 | col19 | col20 | col21 | col22 | col23 | col24 | col25 | col26 | col27 | col28 | col29 | col30 | col31 | col32 | col33 | col34 | col35 | col36 | col37 | col38 | col39 |
|------+------+------+------+------+------+------+------+------+------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------|
|    1 |    2 |    3 |    4 |    5 |    6 |    7 |    8 |    9 |   10 |    11 |    12 |    13 |    14 |    15 |    16 |    17 |    18 |    19 |    20 |    21 |    22 |    23 |    24 |    25 |    26 |    27 |    28 |    29 |    30 |    31 |    32 |    33 |    34 |    35 |    36 |    37 |    38 |    39 |    40 |
|    1 |    2 |    3 |    4 |    5 |    6 |    7 |    8 |    9 |   10 |    11 |    12 |    13 |    14 |    15 |    16 |    17 |    18 |    19 |    20 |    21 |    22 |    23 |    24 |    25 |    26 |    27 |    28 |    29 |    30 |    31 |    32 |    33 |    34 |    35 |    36 |    37 |    38 |    39 |    40 |


[[Cref:tab:table_example]] uses the custom =adjusttabular= environment (created in LaTeX),
which forces tables to text width.

If you want the features provided by a LaTeX code block, but you also want the
code block to be rendered as raw LaTeX, Markdown, HTML, etc., on export, just set the
block(s) to ~:exports results~--and you might need to set ~:results html~, or
another specific export type.

#+BEGIN_SRC latex
\begin{equation}
   \int_0^\infty x e^x dx
   \label{eq:an-equation}
\end{equation}
#+END_SRC

[[Cref:eq:an-equation]] is a numbered equation and [[Cref:fig:example_figure]] is a figure!

#+NAME: example_figure
#+BEGIN_SRC python :eval never-export :exports results :results raw value file
figures_dir = '../../figures'
graph_out_filename = os.path.join(os.path.relpath(figures_dir), 'example_figure.pdf')

_ = plt.figure()
_ = plt.plot(np.arange(10))
_ = plt.savefig(graph_out_filename)
_ = plt.close()

graph_out_filename
#+END_SRC

#+ATTR_ORG: :width 600
#+ATTR_LATEX: :width 1.0\textwidth :float t
#+CAPTION: A caption for a figure!
#+NAME: fig:example_figure
#+RESULTS: example_figure
[[file:../../figures/example_figure.pdf]]

You can also pull in code from remote sites:
#+BEGIN_SRC elisp :eval never :exports both :results replace drawer output :wrap "SRC elisp :eval t :exports none :results none"
(with-current-buffer
    (url-retrieve-synchronously "https://gist.github.com/brandonwillard/14abe113d993cd3270c6046c6a98bcc5/raw")
  (delete-region (point) url-http-end-of-headers)
  ;; (eval-buffer)
  (princ (buffer-string)))
#+END_SRC

* Conclusion

A conclusion goes here.  Here's a [[#sec:introduction][link]] to the introduction section.

For a more convenient bibliography integration, try the customizations in the
[[https://github.com/brandonwillard/org-btw][src_elisp[:eval never]{org-btw}]]
package.

#+BIBLIOGRAPHYSTYLE: plainnat
#+BIBLIOGRAPHY: ../tex/example-document.bib
